@page "/"
@inject Tarea5_.Servicios.SecretoServicio servicio
@inject Tarea5_.Servicios.UsuarioServicio servicios
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime iJSRuntime;
@attribute [Authorize]

<div class="dropright">
    <div>
        <a>Hola @nombre @apellido! </a>
    </div>
    <div>
        <img src="@foto" alt="foto" />
    </div>
</div>

<div class="row bg-light">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Titulo</th>
                <th>Descripcion</th>
                <th>Valor Monetario</th>
                <th>Fecha</th>
                <th>Lugar</th>
                <th>Latitud, Longitud</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Secretos.Where(u => u.Usuario == id).Any())
            {
                @foreach (var secreto in Secretos.Where(s=> s.Usuario == id))
                {
                    <tr>
                        <td>@secreto.Titulo</td>
                        <td>@secreto.Descripcion</td>
                        <td>@secreto.Valor_Moneda</td>
                        <td>@secreto.Fecha</td>
                        <td>@secreto.Lugar</td>
                        <td>@secreto.Lat_y_Long</td>
                        <td><button class="btn btn-dark" @onclick="(() => SetSecretoUpdate(secreto))">Editar</button></td>
                        <td><button class="btn btn-danger" @onclick="(() => BorrarSecreto(secreto))">Borrar</button></td>
                    </tr>
                }

            }
            else
            {
                <tr><td colspan="6"><strong>No se han encontrado secretos</strong></td></tr>
            }
        </tbody>
    </table>
</div>

<div class="row m-5">
    <div class="col-5 bg-light m-2 justify-content-start">
        <div class="p-3 mb-3 bg-primary text-white text-center">Agregar nuevo secreto</div>
        <EditForm Model="@NuevoSecre">
            <div class="form-group">
                <label for="name">Titulo</label>
                <input type="text" id="titulo" class="form-control" @bind-value="@NuevoSecre.Titulo" />
            </div>
            <div class="form-group">
                <label for="quantity">Descripcion</label>
                <input type="text" id="descripcion" class="form-control" @bind="@NuevoSecre.Descripcion" />
            </div>
            <div class="form-group">
                <label for="quantity">Valor Monetario</label>
                <input type="text" id="valor" class="form-control" @bind="@NuevoSecre.Valor_Moneda" />
            </div>
            <div class="form-group">
                <label for="Description">Fecha</label>
                <input type="text" id="fecha" class="form-control" @bind="@NuevoSecre.Fecha" />
            </div>
            <div class="form-group">
                <label for="Description">Lugar</label>
                <input type="text" id="lugar" class="form-control" @bind="@NuevoSecre.Lugar" />
            </div>
            <div class="form-group">
                <label for="Description">Latitud, Longitud</label>
                <input type="text" id="lat_long" class="form-control" @bind="@NuevoSecre.Lat_y_Long" />
            </div>
            <div class="text-center p-3 mb-3">
                <button class="btn btn-info" @onclick="AgregarSecreto"> Agregar Secreto</button>
            </div>
        </EditForm>
    </div>



    <div class="col-5 bg-light m-2 justify-content-end">
        <div class="p-3 mb-1 bg-primary text-white text-center">Editar Secreto</div>
        <EditForm Model="@EditarSecre">
            <div class="form-group">
                <label for="name">Titulo</label>
                <input type="text" id="titulo" class="form-control" @bind-value="@EditarSecre.Titulo" />
            </div>
            <div class="form-group">
                <label for="price">Descripcion</label>
                <input type="text" id="descripcion" class="form-control" @bind="@EditarSecre.Descripcion" />
            </div>
            <div class="form-group">
                <label for="quantity">Valor Monetario</label>
                <input type="text" id="valor" class="form-control" @bind="@EditarSecre.Valor_Moneda" />
            </div>
            <div class="form-group">
                <label for="Description">Fecha</label>
                <input type="text" id="fecha" class="form-control" @bind="@EditarSecre.Fecha" />
            </div>
            <div class="form-group">
                <label for="Description">Lugar</label>
                <input type="text" id="lugar" class="form-control" @bind="@EditarSecre.Lugar" />
            </div>
            <div class="form-group">
                <label for="Description">Latitud, Longitud</label>
                <input type="text" id="fecha" class="form-control" @bind="@EditarSecre.Lat_y_Long" />
            </div>
            <div class="text-center p-3 mb-3">
                <button class="btn btn-info" @onclick="EditarSecreto"> Actualizar Secreto</button>
            </div>
        </EditForm>
    </div>
</div>






@code {

    List<Tarea5_.Models.Secreto> Secretos = new List<Tarea5_.Models.Secreto>();
    List<Tarea5_.Models.Usuario> Usuarios = new List<Tarea5_.Models.Usuario>();
    private Blazored.SessionStorage.ISessionStorageService _sessionStorage;
    string cedu, nombre, apellido, foto;
    int id;

    protected override async Task OnInitializedAsync()
    {
        await RefrescarSecretos();
        _sessionStorage = sessionStorage;
        Usuarios = await servicios.GetUsuariosAsync();

        await Datos();
    }

    private async Task RefrescarSecretos()
    {
        Secretos = await servicio.GetSecretosAsync();

    }

    private async Task Datos()
    {
        cedu = await sessionStorage.GetItemAsync<string>("cedula");
        var usu = Usuarios.FirstOrDefault(u => u.Cedula.Equals(cedu));
        if (usu == null)
        {
            await iJSRuntime.InvokeVoidAsync("Reload");
        }
        else
        {
            id = usu.Id;
            nombre = usu.Nombre;
            apellido = usu.Apellido;
            foto = usu.Foto;
        }

    }

    public Tarea5_.Models.Secreto NuevoSecre { get; set; } = new Models.Secreto();

    private async Task AgregarSecreto()
    {
        NuevoSecre.Usuario = id;

        await servicio.AgregarSecreto(NuevoSecre);

        NuevoSecre = new Models.Secreto();

        await RefrescarSecretos();
    }

    Tarea5_.Models.Secreto EditarSecre = new Models.Secreto();
    private void SetSecretoUpdate(Tarea5_.Models.Secreto secreto)
    {
        EditarSecre = secreto;

    }

    private async Task EditarSecreto()
    {
        await servicio.EditarSecreto(EditarSecre);
        EditarSecre = new Models.Secreto();
        await RefrescarSecretos();
    }

    private async Task BorrarSecreto(Tarea5_.Models.Secreto secreto)
    {

        await servicio.BorrarSecreto(secreto);

        await RefrescarSecretos();
    }
}
