@page "/iniciar"
@inject Tarea5_.Servicios.UsuarioServicio servicio
@inject AuthenticationStateProvider auth
@using Tarea5_.Data
@inject NavigationManager nav
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime js


<div class="col-5 bg-light m-2 justify-content-start">
    <div class="p-3 mb-3 bg-primary text-white text-center">Log In</div>

    <div class="form-group">
        <label>Cedula</label>
        <input type="number" id="titulo" class="form-control" @bind-value="@cedu" />
    </div>
    <div class="form-group">
        <label>Contraseña</label>
        <input type="password" id="contraseña" class="form-control" @bind="@clave" />
    </div>
    <div class="text-center p-3 mb-3">
        <button class="btn btn-info" @onclick="Verificar">Log In</button>
    </div>

</div>

@code {

    List<Tarea5_.Models.Usuario> Usuarios = new List<Tarea5_.Models.Usuario>();


    string cedu, clave;

    protected override async Task OnInitializedAsync()
    {
        Usuarios = await servicio.GetUsuariosAsync();

    }

    private async Task Verificar()
    {
        var usu = Usuarios.FirstOrDefault(u => u.Cedula.Equals(cedu));
        if (usu == null)
        {
            await js.InvokeAsync<bool>("confirm", "Cedula Incorrecta");
        }
        else
        {
            var id = usu.Id;
            var pass = usu.Clave;
            if (pass != clave)
            {
                await js.InvokeAsync<bool>("confirm", "Contraseña Incorrecta");
            }
            else
            {
                await Correcto();
            }
        }
    }

    private async Task<bool> Correcto()
    {

        ((Authorize)auth).Logeado(cedu);
        nav.NavigateTo("/");
        await sessionStorage.SetItemAsync("cedula", cedu);
        return await Task.FromResult(true);

    }
}